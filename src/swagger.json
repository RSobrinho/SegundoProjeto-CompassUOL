{
  "openapi": "3.0.0",
  "info": {
    "title": "Second Challenge - Compass Planner ",
    "description": "This is a planner where you can organize your week and tasks the way you want it.",
    "termsOfService": "",
    "contact": {
      "name": "",
      "url": "",
      "email": ""
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8083/api/v1/",
      "description": "URL to test locally"
    },
    {
      "url": "http://44.203.14.175:3000/api/v1/",
      "description": "PROD URL"
    }
  ],
  "paths": {
    "/users/": {
      "delete": {
        "summary": "Delete your account.",
        "description": "This route is responsible for deleting your account.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted!"
          }
        }
      },
      "patch": {
        "summary": "Update your account.",
        "description": "This route is responsible for updating your user account.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "user": {
                  "value": {
                    "firstName": "Gabriela",
                    "lastName": "Medeiros",
                    "birthDate": "2004-05-09",
                    "city": "Campo Grande",
                    "country": "Brazil",
                    "email": "gabi@teste.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "This route is not responsible for updating your password!"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/signUp": {
      "post": {
        "summary": "Sign up a new user.",
        "description": "This route is responsible for user sign up.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "user": {
                  "value": {
                    "firstName": "Gabriela",
                    "lastName": "Medeiros",
                    "birthDate": "2004-05-09",
                    "city": "Campo Grande",
                    "country": "Brazil",
                    "email": "gabi@teste.com",
                    "password": "1234",
                    "confirmPassword": "1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "The password and confirmPassword are not the same OR This email already exists"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "success",
                    "token": "JWT_TOKEN",
                    "message": "User created successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/signIn": {
      "post": {
        "summary": "Sign in user.",
        "description": "This route is responsible for user sign in.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "user": {
                  "value": {
                    "email": "gabi@teste.com",
                    "password": "1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Email or password not valid"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "success",
                    "token": "JWT_TOKEN",
                    "message": "User logged in successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "summary": "Get email to reset your password.",
        "description": "This route is responsible for sending an email if the user forgot his password.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "user": {
                  "value": {
                    "email": "f71356dbb0-f132a5@inbox.mailtrap.io"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "User not found!"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "success",
                    "message": "A password reset link was sent to your email."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/resetPassword/{resetToken}": {
      "post": {
        "summary": "Reset your password",
        "description": "This route is responsible for resetting the user password.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "resetToken",
            "in": "path",
            "description": "Reset token",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "user": {
                  "value": {
                    "password": "1234",
                    "confirmPassword": "1234"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Password and confirmPassword are not the same"
          },
          "404": {
            "description": "User not found."
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "success",
                    "token": "JWT_TOKEN",
                    "message": "Password changed successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/": {
      "post": {
        "summary": "Create new event",
        "description": "This route is responsible for create a new event for the currently logged in user.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              },
              "examples": {
                "event": {
                  "value": {
                    "description": "Easter",
                    "dayOfWeek": "sunday",
                    "dateTime": "2023-04-09"
                  }
                }
              }
            },
            "responses": {}
          }
        },
        "responses": {
          "422": {
            "description": "Duplicated event on this day."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all events",
        "description": "This route is responsible for getting all events from the currently logged in user.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Get event by id",
        "description": "This route is responsible for getting an event by id.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete event by id.",
        "description": "This route is responsible for deleting an event by id.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Event deleted!"
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Get event by weekday.",
        "description": "This route is responsible for getting an event by weekday.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dayOfWeek",
            "in": "query",
            "description": "Event dayOfWeek",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete event by weekday.",
        "description": "This route is responsible for deleting an event by weekday.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "dayOfWeek",
            "in": "query",
            "description": "Event dayOfWeek",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Event deleted!"
          }
        }
      }
    },
    "/events/filterByDate": {
      "get": {
        "summary": "Get all events between a specific date range.",
        "description": "This route is responsible for getting all events between a specific date range.",
        "tags": [
          "Event"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Event startDate",
            "required": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Event endDate",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthDate": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "dayOfWeek": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "dateTime": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}